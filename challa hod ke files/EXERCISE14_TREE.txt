EXERCISE 15 : IMPLEMENT BINARY SEARCH TREE AND PERFORM TREE TRAVERSALS

CODE SNIPPET :
class BST:
    def __init__(self,key):
        self.key=key
        self.lchild=None
        self.rchild=None
    def insert(self,data):
        if self.key is None:
            self.key=data
            return
        if self.key == data:
            return
        if data < self.key:
            if self.lchild:
                self.lchild.insert(data)
            else:
                self.lchild=BST(data)
        else:
            if self.rchild:
                self.rchild.insert(data)
            else:
                self.rchild = BST(data)
    def preorder(self):
        print(self.key, end=" ")
        if self.lchild:
            self.lchild.preorder()
        if self.rchild:
            self.rchild.preorder()
    def inorder(self):
        if self.lchild:
            self.lchild.inorder()
        print(self.key,end = " ")
        if self.rchild:
            self.rchild.inorder()
    def postorder(self):
        if self.lchild:
            self.lchild.postorder()
        if self.rchild:
            self.rchild.postorder()
        print(self.key, end=" ")

root = BST(None)
list1 = [5,15,4,6]
for i in list1:
    root.insert(i)
print("pre-order ")
root.preorder()
print()
print("in-order")
root.inorder()
print()
print("Post-order")
root.postorder()

		SAMPLE INPUT  : [5,15,4,6]

                  OUTPUT 
pre-order 
5 4 15 6 
in-order
4 5 6 15 
Post-order
4 6 15 5 